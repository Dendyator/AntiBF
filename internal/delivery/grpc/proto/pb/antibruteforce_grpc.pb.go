// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: antibruteforce.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AntiBruteForce_CheckAuthorization_FullMethodName  = "/antibruteforce.AntiBruteForce/CheckAuthorization"
	AntiBruteForce_ResetBucket_FullMethodName         = "/antibruteforce.AntiBruteForce/ResetBucket"
	AntiBruteForce_AddToBlacklist_FullMethodName      = "/antibruteforce.AntiBruteForce/AddToBlacklist"
	AntiBruteForce_RemoveFromBlacklist_FullMethodName = "/antibruteforce.AntiBruteForce/RemoveFromBlacklist"
	AntiBruteForce_AddToWhitelist_FullMethodName      = "/antibruteforce.AntiBruteForce/AddToWhitelist"
	AntiBruteForce_RemoveFromWhitelist_FullMethodName = "/antibruteforce.AntiBruteForce/RemoveFromWhitelist"
)

// AntiBruteForceClient is the client API for AntiBruteForce service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AntiBruteForceClient interface {
	CheckAuthorization(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*AuthResponse, error)
	ResetBucket(ctx context.Context, in *ResetRequest, opts ...grpc.CallOption) (*ResetResponse, error)
	AddToBlacklist(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error)
	RemoveFromBlacklist(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error)
	AddToWhitelist(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error)
	RemoveFromWhitelist(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error)
}

type antiBruteForceClient struct {
	cc grpc.ClientConnInterface
}

func NewAntiBruteForceClient(cc grpc.ClientConnInterface) AntiBruteForceClient {
	return &antiBruteForceClient{cc}
}

func (c *antiBruteForceClient) CheckAuthorization(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*AuthResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AuthResponse)
	err := c.cc.Invoke(ctx, AntiBruteForce_CheckAuthorization_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *antiBruteForceClient) ResetBucket(ctx context.Context, in *ResetRequest, opts ...grpc.CallOption) (*ResetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResetResponse)
	err := c.cc.Invoke(ctx, AntiBruteForce_ResetBucket_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *antiBruteForceClient) AddToBlacklist(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListResponse)
	err := c.cc.Invoke(ctx, AntiBruteForce_AddToBlacklist_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *antiBruteForceClient) RemoveFromBlacklist(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListResponse)
	err := c.cc.Invoke(ctx, AntiBruteForce_RemoveFromBlacklist_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *antiBruteForceClient) AddToWhitelist(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListResponse)
	err := c.cc.Invoke(ctx, AntiBruteForce_AddToWhitelist_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *antiBruteForceClient) RemoveFromWhitelist(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListResponse)
	err := c.cc.Invoke(ctx, AntiBruteForce_RemoveFromWhitelist_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AntiBruteForceServer is the server API for AntiBruteForce service.
// All implementations must embed UnimplementedAntiBruteForceServer
// for forward compatibility.
type AntiBruteForceServer interface {
	CheckAuthorization(context.Context, *AuthRequest) (*AuthResponse, error)
	ResetBucket(context.Context, *ResetRequest) (*ResetResponse, error)
	AddToBlacklist(context.Context, *ListRequest) (*ListResponse, error)
	RemoveFromBlacklist(context.Context, *ListRequest) (*ListResponse, error)
	AddToWhitelist(context.Context, *ListRequest) (*ListResponse, error)
	RemoveFromWhitelist(context.Context, *ListRequest) (*ListResponse, error)
	mustEmbedUnimplementedAntiBruteForceServer()
}

// UnimplementedAntiBruteForceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAntiBruteForceServer struct{}

func (UnimplementedAntiBruteForceServer) CheckAuthorization(context.Context, *AuthRequest) (*AuthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckAuthorization not implemented")
}
func (UnimplementedAntiBruteForceServer) ResetBucket(context.Context, *ResetRequest) (*ResetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetBucket not implemented")
}
func (UnimplementedAntiBruteForceServer) AddToBlacklist(context.Context, *ListRequest) (*ListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddToBlacklist not implemented")
}
func (UnimplementedAntiBruteForceServer) RemoveFromBlacklist(context.Context, *ListRequest) (*ListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveFromBlacklist not implemented")
}
func (UnimplementedAntiBruteForceServer) AddToWhitelist(context.Context, *ListRequest) (*ListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddToWhitelist not implemented")
}
func (UnimplementedAntiBruteForceServer) RemoveFromWhitelist(context.Context, *ListRequest) (*ListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveFromWhitelist not implemented")
}
func (UnimplementedAntiBruteForceServer) mustEmbedUnimplementedAntiBruteForceServer() {}
func (UnimplementedAntiBruteForceServer) testEmbeddedByValue()                        {}

// UnsafeAntiBruteForceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AntiBruteForceServer will
// result in compilation errors.
type UnsafeAntiBruteForceServer interface {
	mustEmbedUnimplementedAntiBruteForceServer()
}

func RegisterAntiBruteForceServer(s grpc.ServiceRegistrar, srv AntiBruteForceServer) {
	// If the following call pancis, it indicates UnimplementedAntiBruteForceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AntiBruteForce_ServiceDesc, srv)
}

func _AntiBruteForce_CheckAuthorization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AntiBruteForceServer).CheckAuthorization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AntiBruteForce_CheckAuthorization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AntiBruteForceServer).CheckAuthorization(ctx, req.(*AuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AntiBruteForce_ResetBucket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AntiBruteForceServer).ResetBucket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AntiBruteForce_ResetBucket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AntiBruteForceServer).ResetBucket(ctx, req.(*ResetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AntiBruteForce_AddToBlacklist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AntiBruteForceServer).AddToBlacklist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AntiBruteForce_AddToBlacklist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AntiBruteForceServer).AddToBlacklist(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AntiBruteForce_RemoveFromBlacklist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AntiBruteForceServer).RemoveFromBlacklist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AntiBruteForce_RemoveFromBlacklist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AntiBruteForceServer).RemoveFromBlacklist(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AntiBruteForce_AddToWhitelist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AntiBruteForceServer).AddToWhitelist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AntiBruteForce_AddToWhitelist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AntiBruteForceServer).AddToWhitelist(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AntiBruteForce_RemoveFromWhitelist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AntiBruteForceServer).RemoveFromWhitelist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AntiBruteForce_RemoveFromWhitelist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AntiBruteForceServer).RemoveFromWhitelist(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AntiBruteForce_ServiceDesc is the grpc.ServiceDesc for AntiBruteForce service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AntiBruteForce_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "antibruteforce.AntiBruteForce",
	HandlerType: (*AntiBruteForceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckAuthorization",
			Handler:    _AntiBruteForce_CheckAuthorization_Handler,
		},
		{
			MethodName: "ResetBucket",
			Handler:    _AntiBruteForce_ResetBucket_Handler,
		},
		{
			MethodName: "AddToBlacklist",
			Handler:    _AntiBruteForce_AddToBlacklist_Handler,
		},
		{
			MethodName: "RemoveFromBlacklist",
			Handler:    _AntiBruteForce_RemoveFromBlacklist_Handler,
		},
		{
			MethodName: "AddToWhitelist",
			Handler:    _AntiBruteForce_AddToWhitelist_Handler,
		},
		{
			MethodName: "RemoveFromWhitelist",
			Handler:    _AntiBruteForce_RemoveFromWhitelist_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "antibruteforce.proto",
}
